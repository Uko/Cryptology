/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package uko.cryptology.vigenere;

import javax.print.DocFlavor.CHAR_ARRAY;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//uko.cryptology.vigenere//Vigehere//EN",
autostore = false)
@TopComponent.Description(preferredID = "VigehereTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "uko.cryptology.vigenere.VigehereTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_VigehereAction",
preferredID = "VigehereTopComponent")
public final class VigehereTopComponent extends TopComponent
{
	public VigehereTopComponent()
	{
		initComponents();
		setName(NbBundle.getMessage(VigehereTopComponent.class, "CTL_VigehereTopComponent"));
		setToolTipText(NbBundle.getMessage(VigehereTopComponent.class, "HINT_VigehereTopComponent"));
		putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
		putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE);

	}
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        srcTextArea = new javax.swing.JTextArea();
        keyTextField = new javax.swing.JTextField();
        codeButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        dstTextArea = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();

        srcTextArea.setColumns(20);
        srcTextArea.setRows(5);
        srcTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                srcTextAreaKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(srcTextArea);

        keyTextField.setText(org.openide.util.NbBundle.getMessage(VigehereTopComponent.class, "VigehereTopComponent.keyTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(codeButton, org.openide.util.NbBundle.getMessage(VigehereTopComponent.class, "VigehereTopComponent.codeButton.text")); // NOI18N
        codeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codeButtonActionPerformed(evt);
            }
        });

        dstTextArea.setColumns(20);
        dstTextArea.setRows(5);
        jScrollPane2.setViewportView(dstTextArea);

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(VigehereTopComponent.class, "VigehereTopComponent.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(codeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(keyTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(codeButton)
                    .addComponent(keyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private void srcTextAreaKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_srcTextAreaKeyTyped
	{//GEN-HEADEREND:event_srcTextAreaKeyTyped

	}//GEN-LAST:event_srcTextAreaKeyTyped

	private void codeButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_codeButtonActionPerformed
	{//GEN-HEADEREND:event_codeButtonActionPerformed
		String src=srcTextArea.getText().toUpperCase();
		String key=keyTextField.getText().toUpperCase();
		char[] dst = new char[src.length()];
		for(int i=0;i<src.length();i++)
		{
			int a=(int)src.charAt(i)-65;
			int b=(int)key.charAt(i%key.length())-65;
			int c=(a+b)%26;
			dst[i]=(char)(c+65);
		}
		dstTextArea.setText(new String(dst));
	}//GEN-LAST:event_codeButtonActionPerformed

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
	{//GEN-HEADEREND:event_jButton1ActionPerformed
		String src=srcTextArea.getText().toUpperCase();
		String key=keyTextField.getText().toUpperCase();
		char[] dst = new char[src.length()];
		for(int i=0;i<src.length();i++)
		{
			int a=(int)src.charAt(i)-65;
			int b=(int)key.charAt(i%key.length())-65;
			int c=(a-b+26)%26;
			dst[i]=(char)(c+65);
		}
		dstTextArea.setText(new String(dst));
	}//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton codeButton;
    private javax.swing.JTextArea dstTextArea;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField keyTextField;
    private javax.swing.JTextArea srcTextArea;
    // End of variables declaration//GEN-END:variables
	@Override
	public void componentOpened()
	{
		// TODO add custom code on component opening
	}
	@Override
	public void componentClosed()
	{
		// TODO add custom code on component closing
	}
	void writeProperties(java.util.Properties p)
	{
		// better to version settings since initial version as advocated at
		// http://wiki.apidesign.org/wiki/PropertyFiles
		p.setProperty("version", "1.0");
		// TODO store your settings
	}
	void readProperties(java.util.Properties p)
	{
		String version = p.getProperty("version");
		// TODO read your settings according to their version
	}
}
